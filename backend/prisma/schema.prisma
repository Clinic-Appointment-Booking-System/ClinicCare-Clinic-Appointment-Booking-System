// --------------------
// DATABASE CONNECTION
// --------------------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------
// ENUMS
// --------------------
enum Role {
  ADMIN
  DOCTOR
  PATIENT
}

enum AppointmentStatus {
  BOOKED
  COMPLETED
  CANCELLED
}

// --------------------
// USER TABLE
// --------------------
model User {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  passwordHash   String
  role           Role            @default(PATIENT)
  createdAt      DateTime        @default(now())

  // Relations
  doctor         Doctor?
  patient        Patient?
  notifications  Notification[]
}

// --------------------
// SPECIALIZATION TABLE
// --------------------
model Specialization {
  id     Int       @id @default(autoincrement())
  name   String    @unique
  doctors Doctor[]
}

// --------------------
// DOCTOR TABLE
// --------------------
model Doctor {
  id                 Int              @id @default(autoincrement())
  userId             Int              @unique
  specializationId   Int
  description        String?
  availabilityDays   Json?
  imageUrl           String?
  createdAt          DateTime         @default(now())

  // Relations
  user               User             @relation(fields: [userId], references: [id])
  specialization     Specialization   @relation(fields: [specializationId], references: [id])
  appointments       Appointment[]
}

// --------------------
// PATIENT TABLE
// --------------------
model Patient {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  age          Int?
  phoneNumber  String?
  address      String?
  createdAt    DateTime      @default(now())

  // Relations
  user         User          @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

// --------------------
// APPOINTMENT TABLE
// --------------------
model Appointment {
  id               Int                 @id @default(autoincrement())
  doctorId         Int
  patientId        Int
  appointmentDate  DateTime
  appointmentTime  String
  reason           String?
  status           AppointmentStatus   @default(BOOKED)

  // Relations
  doctor           Doctor              @relation(fields: [doctorId], references: [id])
  patient          Patient             @relation(fields: [patientId], references: [id])
  notifications    Notification[]
}

// --------------------
// NOTIFICATION TABLE
// --------------------
model Notification {
  id             Int          @id @default(autoincrement())
  userId         Int
  appointmentId  Int
  message        String
  sentAt         DateTime     @default(now())

  // Relations
  user           User         @relation(fields: [userId], references: [id])
  appointment    Appointment  @relation(fields: [appointmentId], references: [id])
}
